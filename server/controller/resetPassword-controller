const { CandidateDetails } = require('../model/schema');
const bcrypt = require('bcryptjs');

const resetPassword = async (req, res) => {
  try {
    const pattern =
      /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$/;
    const { id } = req.params;
    const { PASSWORD, CONFIRM_PASSWORD } = req.body;
    const Candidates = await CandidateDetails.findByIdAndUpdate(
      { _id: id },
      req.body,
      { new: true }
    );

    if (PASSWORD.length < 7 || PASSWORD.length >= 15) {
      return res.status(400).json({
        error: 'password must contain atleast 7 chars and atmost 15 chars',
      });
    } else if (!pattern.test(PASSWORD)) {
      return res.status(400).json({
        error:
          'password must contain atleast one upper case, one lower case and one special character',
      });
    } else if (PASSWORD !== CONFIRM_PASSWORD) {
      return res.status(400).json({ msg: 'Passwords are not matching' });
    }
    const hash_password = await bcrypt.hash(PASSWORD, 10);
    Candidates.PASSWORD = hash_password;
    await Candidates.save();
    return res.status(200).json({ msg: 'Password updated successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
module.exports = resetPassword;
